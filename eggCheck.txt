local function getEggStats(eggFolder)
    local display = eggFolder:FindFirstChild("Display")
    if not (display and display:FindFirstChildWhichIsA("SurfaceGui")) then
        return nil, nil
    end
    local surfaceGui = display:FindFirstChildWhichIsA("SurfaceGui")

    local icon = surfaceGui:FindFirstChild("Icon")
    if not icon then
        return nil, nil
    end

    local luckLabel = icon:FindFirstChild("Luck")
    if not (luckLabel and luckLabel:IsA("TextLabel")) then
        return nil, nil
    end
    local digits    = luckLabel.Text:match("%d+")
    local luckValue = digits and tonumber(digits) or nil

    local timerLabel = surfaceGui:FindFirstChild("Timer")
    if not timerLabel then
        for _, obj in ipairs(surfaceGui:GetDescendants()) do
            if obj:IsA("TextLabel") and obj.Name:lower() == "timer" then
                timerLabel = obj
                break
            end
        end
    end
    local timeText = (timerLabel and timerLabel:IsA("TextLabel")) and timerLabel.Text or nil

    return luckValue, timeText
end

local rifts = workspace:FindFirstChild("Rendered")
            and workspace.Rendered:FindFirstChild("Rifts")
if not rifts then
    error("Ordner Workspace.Rendered.Rifts nicht gefunden.")
end

local candidates = {}
for _, eggFolder in ipairs(rifts:GetChildren()) do
    if eggFolder.Name == eggName then
        table.insert(candidates, eggFolder)
    end
end

if #candidates == 0 then
    error(("❌ Kein Egg namens '%s' gefunden."):format(eggName))
    return
end

local bestEgg, bestLuck, bestTime
for _, ef in ipairs(candidates) do
    local luck, timeText = getEggStats(ef)
    if luck and (not bestLuck or luck > bestLuck) then
        bestEgg  = ef
        bestLuck = luck
        bestTime = timeText
    end
end

if not bestEgg then
    error(("❌ Luck-Wert für '%s' konnte nicht ermittelt werden."):format(eggName))
    return
end

local outputPart = bestEgg:FindFirstChild("Output")
local yInfo = ""
if outputPart and outputPart:IsA("BasePart") then
    yInfo = (" | Y=%.2f"):format(outputPart.Position.Y)
end

local ok = bestLuck >= requiredLuck
local icon = ok and "✅" or "❌"
local comp = ok and "≥" or "<"
local timeInfo = bestTime and (" | Zeit übrig: " .. bestTime) or ""

local message = ("'%s' (Instanz #%d): Luck %d %s %d%s%s"):format(
    eggName,
    table.find(candidates, bestEgg),
    bestLuck,
    comp,
    requiredLuck,
    timeInfo,
    yInfo
)

if ok then
    print(icon .. " " .. message)
else
    error(icon .. " " .. message)
end
