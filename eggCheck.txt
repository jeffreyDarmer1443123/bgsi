-- eggCheck.txt
-- Wird vom Executor geladen. Error’t, wenn das gesuchte Egg fehlt oder Luck < requiredLuck.

local eggName      = "void-egg"  -- hier anpassen
local requiredLuck = 5           -- hier anpassen

-- Liest den Luck-Wert aus einem Egg-Folder, oder liefert nil
local function getLuck(folder)
    local display = folder:FindFirstChild("Display")
    if not (display and display:FindFirstChildWhichIsA("SurfaceGui")) then return nil end
    local gui  = display:FindFirstChildWhichIsA("SurfaceGui")
    local icon = gui:FindFirstChild("Icon")
    if not icon then return nil end
    local lbl  = icon:FindFirstChild("Luck")
    if not (lbl and lbl:IsA("TextLabel")) then return nil end
    local num  = lbl.Text:match("%d+")
    return num and tonumber(num) or nil
end

-- Suche alle Eggs im Workspace.Rendered.Rifts, wähle das mit dem höchsten Luck
local rifts = workspace:FindFirstChild("Rendered")
          and workspace.Rendered:FindFirstChild("Rifts")
if not rifts then
    error("❌ Rendered.Rifts nicht gefunden.")
end

local bestLuck
for _, folder in ipairs(rifts:GetChildren()) do
    if folder.Name:lower() == eggName:lower() then
        local luck = getLuck(folder)
        if luck and (not bestLuck or luck > bestLuck) then
            bestLuck = luck
        end
    end
end

-- Validiere
if not bestLuck then
    error(("❌ Kein Egg '%s' gefunden."):format(eggName))
elseif bestLuck < requiredLuck then
    error(("❌ Luck %d < %d für '%s'."):format(bestLuck, requiredLuck, eggName))
else
    print(("✅ Egg '%s' mit Luck %d gefunden."):format(eggName, bestLuck))
end
