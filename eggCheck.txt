-- eggCheck.lua
-- Dieses Script wird vom Executor geladen. Es error’t, wenn
-- das gewünschte Egg nicht gefunden wurde oder Luck < requiredLuck.

local eggName      = "void-egg"  -- anzupassen
local requiredLuck = 5           -- anzupassen
local possibleEggs= {
    "aura-Egg",
    "bunny-Egg",
    "common-Egg",
    "crystal-Egg",
    "easter-Egg",
    "easter2-Egg",
    "hell-Egg",
    "iceshard-Egg",
    "inferno-Egg",
    "lunar-Egg",
    "magma-Egg",
    "nightmare-Egg",
    "pastel-Egg",
    "rainbow-Egg",
    "spikey-Egg",
    "spotted-Egg",
    "void-Egg",
}
local possibleLuck = {
    5,
    7,
    10,
    25,
}

-- Hilfsfunktion: liest Luck und liefert Zahl oder nil
local function getLuck(eggFolder)
    local display = eggFolder:FindFirstChild("Display")
    if not (display and display:FindFirstChildWhichIsA("SurfaceGui")) then return nil end
    local icon = display.SurfaceGui:FindFirstChild("Icon")
    if not icon then return nil end
    local label = icon:FindFirstChild("Luck")
    if not (label and label:IsA("TextLabel")) then return nil end
    local digits = label.Text:match("%d+")
    return digits and tonumber(digits) or nil
end

-- 1) Ordner suchen
local rifts = workspace:FindFirstChild("Rendered")
             and workspace.Rendered:FindFirstChild("Rifts")
if not rifts then
    error("❌ Rendered.Rifts nicht gefunden.")
end

-- 2) Kandidaten filtern
local bestLuck
for _, folder in ipairs(rifts:GetChildren()) do
    if folder.Name:lower() == eggName:lower() then
        local luck = getLuck(folder)
        if luck and (not bestLuck or luck > bestLuck) then
            bestLuck = luck
        end
    end
end

-- 3) Validierung
if not bestLuck then
    error(("❌ Kein Egg '%s' gefunden."):format(eggName))
elseif bestLuck < requiredLuck then
    error(("❌ Luck %d < %d für '%s'."):format(bestLuck, requiredLuck, eggName))
else
    print(("✅ Egg '%s' mit Luck %d gefunden."):format(eggName, bestLuck))
end
