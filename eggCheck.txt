local function getEggStats(eggFolder)
    local display = eggFolder:FindFirstChild("Display")
    if not display then return nil, nil end
    
    local surfaceGui = display:FindFirstChildWhichIsA("SurfaceGui")
    if not surfaceGui then return nil, nil end

    local luckValue
    local luckLabel = surfaceGui:FindFirstChild("Luck", true)
    if luckLabel and luckLabel:IsA("TextLabel") then
        luckValue = tonumber(luckLabel.Text:match("%d+")) or 0
    end

    local timeText
    for _, obj in ipairs(surfaceGui:GetDescendants()) do
        if obj:IsA("TextLabel") and obj.Name:lower() == "timer" then
            timeText = obj.Text
            break
        end
    end

    return luckValue, timeText
end

local rifts = workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts")
if not rifts then error("Rifts-Ordner nicht gefunden") end

local candidates = {}
for _, egg in ipairs(rifts:GetChildren()) do
    if egg.Name == eggName then
        table.insert(candidates, egg)
    end
end

if #candidates == 0 then
    error("❌ Kein "..eggName.." gefunden")
end

local bestEgg, bestLuck, bestTime
for _, egg in ipairs(candidates) do
    local luck, time = getEggStats(egg)
    if luck and (not bestLuck or luck > bestLuck) then
        bestEgg, bestLuck, bestTime = egg, luck, time
    end
end

if not bestLuck then
    error("❌ Luck-Wert für "..eggName.." ungültig")
end

local instanceIndex = "N/A"
for i, egg in ipairs(candidates) do
    if egg == bestEgg then
        instanceIndex = tostring(i)
        break
    end
end

local yInfo = ""
local outputPart = bestEgg:FindFirstChild("Output")
if outputPart and outputPart:IsA("BasePart") then
    yInfo = string.format(" | Y=%.1f", outputPart.Position.Y)
end

local ok = bestLuck >= requiredLuck
local icon = ok and "✅" or "❌"
local comp = ok and "≥" or "<"
local timeInfo = bestTime and (" | Zeit: "..bestTime) or ""

local messageParts = {
    ("'%s'"):format(eggName),
    ("Instanz #%s"):format(instanceIndex),
    ("Luck %d %s %d"):format(bestLuck, comp, requiredLuck),
    timeInfo,
    yInfo
}

local cleanParts = {}
for _, part in ipairs(messageParts) do
    if part and part ~= "" then
        table.insert(cleanParts, part)
    end
end

local finalMessage = table.concat(cleanParts, ": ")

if ok then
    print(icon.." "..finalMessage)
else
    error(icon.." "..finalMessage)
end
