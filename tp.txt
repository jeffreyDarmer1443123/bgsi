-- Universal Server Hopper v4.1 (Fixed)
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local PlaceID = 85896571713843  -- Hardcoded PlaceID
local CurrentServerId = game.JobId

local Config = {
    MinPlayers = 1,
    RequiredFreeSlots = 1,
    BaseDelay = 5,
    MaxRetries = 7,
    RateLimitThreshold = 5
}

local function debugLog(...)
    print(os.date("[%H:%M:%S]").." [FixedHopper] "..table.concat({...}, " "))
end

local function handleHttpRequest(url)
    local success, response = pcall(function()
        return game:HttpGetAsync(url, true)
    end)
    return success and response or nil
end

local function fetchServers()
    local response = handleHttpRequest(
        "https://games.roblox.com/v1/games/"..PlaceID..
        "/servers/Public?sortOrder=Asc&limit=100"
    )
    return response and HttpService:JSONDecode(response).data
end

local function filterServers(servers)
    local valid = {}
    for _, server in pairs(servers) do
        if server.id ~= CurrentServerId then
            table.insert(valid, server.id)
        end
    end
    return valid
end

local function attemptTeleport()
    CurrentServerId = game.JobId
    local servers = fetchServers()
    if not servers then return false end
    
    local validServers = filterServers(servers)
    if #validServers == 0 then return false end

    local target = validServers[math.random(#validServers)]
    debugLog("Attempting TP to:", target)
    
    local result = TeleportService:TeleportToPlaceInstance(PlaceID, target)
    if result == Enum.TeleportResult.Success then
        debugLog("Teleport initiated")
        task.wait(5)
        return true
    end
    return false
end

local function main()
    debugLog("Starting improved hopper")
    for i = 1, Config.MaxRetries do
        if attemptTeleport() then return end
        debugLog("Retrying in "..Config.BaseDelay.."s ("..i.."/"..Config.MaxRetries..")")
        task.wait(Config.BaseDelay)
    end
    TeleportService:Teleport(PlaceID)
end

main()
