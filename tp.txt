-- Universal Server Hopper v4.2 (Stabil)
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local PlaceID = placeId or 85896571713843
local CurrentJobId = game.JobId

local Config = {
    MaxRetries = 7,
    BaseDelay = 5,
    RetryIncrement = 3,
    RateLimitWait = 10,
    MinPlayers = 1
}

local function debugLog(...)
    print(os.date("[%H:%M:%S]").." [HopMaster] "..table.concat({...}, " "))
end

local function safeHttpGet(url)
    local success, response = pcall(function()
        return game:HttpGetAsync(url, true)
    end)
    return success and response or nil
end

local function fetchValidServers()
    local response = safeHttpGet(
        "https://games.roblox.com/v1/games/"..PlaceID..
        "/servers/Public?sortOrder=Asc&limit=100"
    )
    
    if not response then
        debugLog("Serverliste nicht abrufbar")
        return {}
    end

    local success, data = pcall(HttpService.JSONDecode, HttpService, response)
    return success and data.data or {}
end

local function filterServers(servers)
    local valid = {}
    for _, server in ipairs(servers) do
        if server.id ~= CurrentJobId
            and server.playing >= Config.MinPlayers
            and server.maxPlayers > server.playing
        then
            table.insert(valid, server.id)
        end
    end
    return valid
end

local function attemptHop()
    local servers = fetchValidServers()
    if #servers == 0 then
        debugLog("Keine passenden Server gefunden")
        return false
    end

    local target = servers[math.random(#servers)]
    debugLog("Versuche Server:", target:sub(1, 8).."...")

    local success = pcall(function()
        TeleportService:TeleportToPlaceInstance(PlaceID, target)
    end)

    if not success then
        debugLog("Fehler bei Teleportversuch")
    end
    return success
end

local function mainHop()
    for attempt = 1, Config.MaxRetries do
        debugLog("Versuch "..attempt.."/"..Config.MaxRetries)
        
        if attemptHop() then
            debugLog("Teleport initiiert")
            task.wait(5)  -- Wartezeit f√ºr Teleport
            return
        end
        
        local delay = Config.BaseDelay + (attempt * Config.RetryIncrement)
        debugLog("Neuer Versuch in "..delay.."s")
        task.wait(delay)
    end

    debugLog("Fallback zu Standard-Teleport")
    TeleportService:Teleport(PlaceID)
end

debugLog("Starte ServerHopper...")
mainHop()
